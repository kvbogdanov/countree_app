// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'tree.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Tree.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Tree TABLE
class TableTree extends SqfEntityTableBase {
  TableTree() {
    // declare properties of EntityTable
    tableName = 'tree';
    primaryKeyName = 'id_tree';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id_system', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('created', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('uploaded', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('is_deleted', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('id_user', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('id_treetype', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('custom_treetype', DbType.text, isNotNull: false),
      SqfEntityFieldBase('longitude', DbType.real, isNotNull: false),
      SqfEntityFieldBase('latitude', DbType.real, isNotNull: false),
      SqfEntityFieldBase('is_alive', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('is_seedling', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('diameter', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('multibarrel', DbType.integer,
          defaultValue: 0, isNotNull: false),
      SqfEntityFieldBase('id_state', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('firstthread', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('ids_condition', DbType.text, isNotNull: false),
      SqfEntityFieldBase('custom_condition', DbType.text, isNotNull: false),
      SqfEntityFieldBase('id_surroundings', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('ids_neighbours', DbType.text, isNotNull: false),
      SqfEntityFieldBase('id_overall', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('images', DbType.text, isNotNull: false),
      SqfEntityFieldBase('height', DbType.real, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTree();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class CountreeStoreDbModel extends SqfEntityModelProvider {
  CountreeStoreDbModel() {
    databaseName = countreeDbModel.databaseName;
    password = countreeDbModel.password;
    dbVersion = countreeDbModel.dbVersion;
    databaseTables = [
      TableTree.getInstance,
    ];

    bundledDatabasePath = countreeDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Tree
class Tree {
  Tree(
      {this.id_tree,
      this.id_system,
      this.created,
      this.uploaded,
      this.is_deleted,
      this.id_user,
      this.id_treetype,
      this.custom_treetype,
      this.longitude,
      this.latitude,
      this.is_alive,
      this.is_seedling,
      this.diameter,
      this.multibarrel,
      this.id_state,
      this.firstthread,
      this.ids_condition,
      this.custom_condition,
      this.id_surroundings,
      this.ids_neighbours,
      this.id_overall,
      this.images,
      this.height,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Tree.withFields(
      this.id_system,
      this.created,
      this.uploaded,
      this.is_deleted,
      this.id_user,
      this.id_treetype,
      this.custom_treetype,
      this.longitude,
      this.latitude,
      this.is_alive,
      this.is_seedling,
      this.diameter,
      this.multibarrel,
      this.id_state,
      this.firstthread,
      this.ids_condition,
      this.custom_condition,
      this.id_surroundings,
      this.ids_neighbours,
      this.id_overall,
      this.images,
      this.height,
      this.isDeleted) {
    _setDefaultValues();
  }
  Tree.withId(
      this.id_tree,
      this.id_system,
      this.created,
      this.uploaded,
      this.is_deleted,
      this.id_user,
      this.id_treetype,
      this.custom_treetype,
      this.longitude,
      this.latitude,
      this.is_alive,
      this.is_seedling,
      this.diameter,
      this.multibarrel,
      this.id_state,
      this.firstthread,
      this.ids_condition,
      this.custom_condition,
      this.id_surroundings,
      this.ids_neighbours,
      this.id_overall,
      this.images,
      this.height,
      this.isDeleted) {
    _setDefaultValues();
  }
  Tree.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id_tree = int.tryParse(o['id_tree'].toString());
    if (o['id_system'] != null) {
      id_system = int.tryParse(o['id_system'].toString());
    }
    if (o['created'] != null) {
      created = int.tryParse(o['created'].toString());
    }
    if (o['uploaded'] != null) {
      uploaded = int.tryParse(o['uploaded'].toString());
    }
    if (o['is_deleted'] != null) {
      is_deleted = int.tryParse(o['is_deleted'].toString());
    }
    if (o['id_user'] != null) {
      id_user = int.tryParse(o['id_user'].toString());
    }
    if (o['id_treetype'] != null) {
      id_treetype = int.tryParse(o['id_treetype'].toString());
    }
    if (o['custom_treetype'] != null) {
      custom_treetype = o['custom_treetype'] as String;
    }
    if (o['longitude'] != null) {
      longitude = double.tryParse(o['longitude'].toString());
    }
    if (o['latitude'] != null) {
      latitude = double.tryParse(o['latitude'].toString());
    }
    if (o['is_alive'] != null) {
      is_alive = int.tryParse(o['is_alive'].toString());
    }
    if (o['is_seedling'] != null) {
      is_seedling = int.tryParse(o['is_seedling'].toString());
    }
    if (o['diameter'] != null) {
      diameter = int.tryParse(o['diameter'].toString());
    }
    if (o['multibarrel'] != null) {
      multibarrel = int.tryParse(o['multibarrel'].toString());
    }
    if (o['id_state'] != null) {
      id_state = int.tryParse(o['id_state'].toString());
    }
    if (o['firstthread'] != null) {
      firstthread = int.tryParse(o['firstthread'].toString());
    }
    if (o['ids_condition'] != null) {
      ids_condition = o['ids_condition'] as String;
    }
    if (o['custom_condition'] != null) {
      custom_condition = o['custom_condition'] as String;
    }
    if (o['id_surroundings'] != null) {
      id_surroundings = int.tryParse(o['id_surroundings'].toString());
    }
    if (o['ids_neighbours'] != null) {
      ids_neighbours = o['ids_neighbours'] as String;
    }
    if (o['id_overall'] != null) {
      id_overall = int.tryParse(o['id_overall'].toString());
    }
    if (o['images'] != null) {
      images = o['images'] as String;
    }
    if (o['height'] != null) {
      height = double.tryParse(o['height'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Tree)
  int id_tree;
  int id_system;
  int created;
  int uploaded;
  int is_deleted;
  int id_user;
  int id_treetype;
  String custom_treetype;
  double longitude;
  double latitude;
  int is_alive;
  int is_seedling;
  int diameter;
  int multibarrel;
  int id_state;
  int firstthread;
  String ids_condition;
  String custom_condition;
  int id_surroundings;
  String ids_neighbours;
  int id_overall;
  String images;
  double height;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Tree)

  static const bool _softDeleteActivated = true;
  TreeManager __mnTree;

  TreeManager get _mnTree {
    return __mnTree = __mnTree ?? TreeManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id_tree != null) {
      map['id_tree'] = id_tree;
    }
    if (id_system != null) {
      map['id_system'] = id_system;
    }

    if (created != null) {
      map['created'] = created;
    }

    if (uploaded != null) {
      map['uploaded'] = uploaded;
    }

    if (is_deleted != null) {
      map['is_deleted'] = is_deleted;
    }

    if (id_user != null) {
      map['id_user'] = id_user;
    }

    if (id_treetype != null) {
      map['id_treetype'] = id_treetype;
    }

    if (custom_treetype != null) {
      map['custom_treetype'] = custom_treetype;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (is_alive != null) {
      map['is_alive'] = is_alive;
    }

    if (is_seedling != null) {
      map['is_seedling'] = is_seedling;
    }

    if (diameter != null) {
      map['diameter'] = diameter;
    }

    if (multibarrel != null) {
      map['multibarrel'] = multibarrel;
    }

    if (id_state != null) {
      map['id_state'] = id_state;
    }

    if (firstthread != null) {
      map['firstthread'] = firstthread;
    }

    if (ids_condition != null) {
      map['ids_condition'] = ids_condition;
    }

    if (custom_condition != null) {
      map['custom_condition'] = custom_condition;
    }

    if (id_surroundings != null) {
      map['id_surroundings'] = id_surroundings;
    }

    if (ids_neighbours != null) {
      map['ids_neighbours'] = ids_neighbours;
    }

    if (id_overall != null) {
      map['id_overall'] = id_overall;
    }

    if (images != null) {
      map['images'] = images;
    }

    if (height != null) {
      map['height'] = height;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id_tree != null) {
      map['id_tree'] = id_tree;
    }
    if (id_system != null) {
      map['id_system'] = id_system;
    }

    if (created != null) {
      map['created'] = created;
    }

    if (uploaded != null) {
      map['uploaded'] = uploaded;
    }

    if (is_deleted != null) {
      map['is_deleted'] = is_deleted;
    }

    if (id_user != null) {
      map['id_user'] = id_user;
    }

    if (id_treetype != null) {
      map['id_treetype'] = id_treetype;
    }

    if (custom_treetype != null) {
      map['custom_treetype'] = custom_treetype;
    }

    if (longitude != null) {
      map['longitude'] = longitude;
    }

    if (latitude != null) {
      map['latitude'] = latitude;
    }

    if (is_alive != null) {
      map['is_alive'] = is_alive;
    }

    if (is_seedling != null) {
      map['is_seedling'] = is_seedling;
    }

    if (diameter != null) {
      map['diameter'] = diameter;
    }

    if (multibarrel != null) {
      map['multibarrel'] = multibarrel;
    }

    if (id_state != null) {
      map['id_state'] = id_state;
    }

    if (firstthread != null) {
      map['firstthread'] = firstthread;
    }

    if (ids_condition != null) {
      map['ids_condition'] = ids_condition;
    }

    if (custom_condition != null) {
      map['custom_condition'] = custom_condition;
    }

    if (id_surroundings != null) {
      map['id_surroundings'] = id_surroundings;
    }

    if (ids_neighbours != null) {
      map['ids_neighbours'] = ids_neighbours;
    }

    if (id_overall != null) {
      map['id_overall'] = id_overall;
    }

    if (images != null) {
      map['images'] = images;
    }

    if (height != null) {
      map['height'] = height;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id_system,
      created,
      uploaded,
      is_deleted,
      id_user,
      id_treetype,
      custom_treetype,
      longitude,
      latitude,
      is_alive,
      is_seedling,
      diameter,
      multibarrel,
      id_state,
      firstthread,
      ids_condition,
      custom_condition,
      id_surroundings,
      ids_neighbours,
      id_overall,
      images,
      height,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id_tree,
      id_system,
      created,
      uploaded,
      is_deleted,
      id_user,
      id_treetype,
      custom_treetype,
      longitude,
      latitude,
      is_alive,
      is_seedling,
      diameter,
      multibarrel,
      id_state,
      firstthread,
      ids_condition,
      custom_condition,
      id_surroundings,
      ids_neighbours,
      id_overall,
      images,
      height,
      isDeleted
    ];
  }

  static Future<List<Tree>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Tree.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Tree>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tree>[];
    try {
      objList = list
          .map((tree) => Tree.fromMap(tree as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Tree.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tree>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tree> objList = <Tree>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tree.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tree by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id_tree
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Tree if exist, otherwise returns null
  Future<Tree> getById(int id_tree,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id_tree == null) {
      return null;
    }
    Tree obj;
    final data = await _mnTree.getById([id_tree]);
    if (data.length != 0) {
      obj = Tree.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tree) object. If the id_tree field is null, saves as a new record and returns new id_tree, if id_tree is not null then updates record

  /// <returns>Returns id_tree
  Future<int> save() async {
    if (id_tree == null || id_tree == 0) {
      id_tree = await _mnTree.insert(this);
    } else {
      // id_tree= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTree.update(this);
    }

    return id_tree;
  }

  /// saveAs Tree. Returns a new Primary Key value of Tree

  /// <returns>Returns a new Primary Key value of Tree
  Future<int> saveAs() async {
    id_tree = null;

    return save();
  }

  /// saveAll method saves the sent List<Tree> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<Tree> trees) async {
    // final results = _mnTree.saveAll('INSERT OR REPLACE INTO tree (id_tree,id_system, created, uploaded, is_deleted, id_user, id_treetype, custom_treetype, longitude, latitude, is_alive, is_seedling, diameter, multibarrel, id_state, firstthread, ids_condition, custom_condition, id_surroundings, ids_neighbours, id_overall, images, height,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',trees);
    // return results; removed in sqfentity_gen 1.3.0+6
    CountreeStoreDbModel().batchStart();
    for (final obj in trees) {
      await obj.save();
    }
    return CountreeStoreDbModel().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id_tree
  Future<int> upsert() async {
    try {
      if (await _mnTree.rawInsert(
              'INSERT OR REPLACE INTO tree (id_tree,id_system, created, uploaded, is_deleted, id_user, id_treetype, custom_treetype, longitude, latitude, is_alive, is_seedling, diameter, multibarrel, id_state, firstthread, ids_condition, custom_condition, id_surroundings, ids_neighbours, id_overall, images, height,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
              [
                id_tree,
                id_system,
                created,
                uploaded,
                is_deleted,
                id_user,
                id_treetype,
                custom_treetype,
                longitude,
                latitude,
                is_alive,
                is_seedling,
                diameter,
                multibarrel,
                id_state,
                firstthread,
                ids_condition,
                custom_condition,
                id_surroundings,
                ids_neighbours,
                id_overall,
                images,
                height,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tree id_tree=$id_tree updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tree id_tree=$id_tree did not update');
      }
      return id_tree;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tree Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Tree>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Tree> trees) async {
    final results = await _mnTree.rawInsertAll(
        'INSERT OR REPLACE INTO tree (id_tree,id_system, created, uploaded, is_deleted, id_user, id_treetype, custom_treetype, longitude, latitude, is_alive, is_seedling, diameter, multibarrel, id_state, firstthread, ids_condition, custom_condition, id_surroundings, ids_neighbours, id_overall, images, height,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        trees);
    return results;
  }

  /// Deletes Tree

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Tree invoked (id_tree=$id_tree)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnTree.delete(
          QueryParams(whereString: 'id_tree=?', whereArguments: [id_tree]));
    } else {
      return _mnTree.updateBatch(
          QueryParams(whereString: 'id_tree=?', whereArguments: [id_tree]),
          {'isDeleted': 1});
    }
  }

  /// Recover Tree>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Tree invoked (id_tree=$id_tree)');
    {
      return _mnTree.updateBatch(
          QueryParams(whereString: 'id_tree=?', whereArguments: [id_tree]),
          {'isDeleted': 0});
    }
  }

  TreeFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return TreeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TreeFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TreeFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    id_system = id_system ?? 0;
    uploaded = uploaded ?? 0;
    is_deleted = is_deleted ?? 0;
    is_alive = is_alive ?? 0;
    is_seedling = is_seedling ?? 0;
    diameter = diameter ?? 0;
    multibarrel = multibarrel ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion tree

// region TreeField
class TreeField extends SearchCriteria {
  TreeField(this.treeFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  TreeFilterBuilder treeFB;

  TreeField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TreeFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    treeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, treeFB.parameters, param, SqlSyntax.EQuals,
            treeFB._addedBlocks)
        : setCriteria(pValue, treeFB.parameters, param, SqlSyntax.NotEQuals,
            treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    treeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, treeFB.parameters, param, SqlSyntax.EQualsOrNull,
            treeFB._addedBlocks)
        : setCriteria(pValue, treeFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder isNull() {
    treeFB._addedBlocks = setCriteria(
        0,
        treeFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      treeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          treeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          treeFB._addedBlocks);
      _waitingNot = '';
      treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
          treeFB._addedBlocks.retVal;
    }
    return treeFB;
  }

  TreeFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      treeFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          treeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          treeFB._addedBlocks);
      _waitingNot = '';
      treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
          treeFB._addedBlocks.retVal;
      treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
          treeFB._addedBlocks.retVal;
    }
    return treeFB;
  }

  TreeFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      treeFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          treeFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          treeFB._addedBlocks);
      _waitingNot = '';
      treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
          treeFB._addedBlocks.retVal;
    }
    return treeFB;
  }

  TreeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      treeFB._addedBlocks = setCriteria(
          pFirst,
          treeFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          treeFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        treeFB._addedBlocks = setCriteria(pFirst, treeFB.parameters, param,
            SqlSyntax.LessThan, treeFB._addedBlocks);
      } else {
        treeFB._addedBlocks = setCriteria(pFirst, treeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, treeFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        treeFB._addedBlocks = setCriteria(pLast, treeFB.parameters, param,
            SqlSyntax.GreaterThan, treeFB._addedBlocks);
      } else {
        treeFB._addedBlocks = setCriteria(pLast, treeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, treeFB._addedBlocks);
      }
    }
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    treeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, treeFB.parameters, param, SqlSyntax.GreaterThan,
            treeFB._addedBlocks)
        : setCriteria(pValue, treeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    treeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, treeFB.parameters, param, SqlSyntax.LessThan,
            treeFB._addedBlocks)
        : setCriteria(pValue, treeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    treeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, treeFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, treeFB._addedBlocks)
        : setCriteria(pValue, treeFB.parameters, param, SqlSyntax.LessThan,
            treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    treeFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, treeFB.parameters, param,
            SqlSyntax.LessThanOrEquals, treeFB._addedBlocks)
        : setCriteria(pValue, treeFB.parameters, param, SqlSyntax.GreaterThan,
            treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }

  TreeFilterBuilder inValues(dynamic pValue) {
    treeFB._addedBlocks = setCriteria(
        pValue,
        treeFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        treeFB._addedBlocks);
    _waitingNot = '';
    treeFB._addedBlocks.needEndBlock[treeFB._blockIndex] =
        treeFB._addedBlocks.retVal;
    return treeFB;
  }
}
// endregion TreeField

// region TreeFilterBuilder
class TreeFilterBuilder extends SearchCriteria {
  TreeFilterBuilder(Tree obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Tree _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  TreeFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  TreeFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  TreeFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  TreeFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param =
          DbParameter(columnName: parameterValue == null ? null : '');
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  TreeFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  TreeFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  TreeFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TreeFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TreeFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TreeFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  TreeField setField(TreeField field, String colName, DbType dbtype) {
    return TreeField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  TreeField _id_tree;
  TreeField get id_tree {
    return _id_tree = setField(_id_tree, 'id_tree', DbType.integer);
  }

  TreeField _id_system;
  TreeField get id_system {
    return _id_system = setField(_id_system, 'id_system', DbType.integer);
  }

  TreeField _created;
  TreeField get created {
    return _created = setField(_created, 'created', DbType.integer);
  }

  TreeField _uploaded;
  TreeField get uploaded {
    return _uploaded = setField(_uploaded, 'uploaded', DbType.integer);
  }

  TreeField _is_deleted;
  TreeField get is_deleted {
    return _is_deleted = setField(_is_deleted, 'is_deleted', DbType.integer);
  }

  TreeField _id_user;
  TreeField get id_user {
    return _id_user = setField(_id_user, 'id_user', DbType.integer);
  }

  TreeField _id_treetype;
  TreeField get id_treetype {
    return _id_treetype = setField(_id_treetype, 'id_treetype', DbType.integer);
  }

  TreeField _custom_treetype;
  TreeField get custom_treetype {
    return _custom_treetype =
        setField(_custom_treetype, 'custom_treetype', DbType.text);
  }

  TreeField _longitude;
  TreeField get longitude {
    return _longitude = setField(_longitude, 'longitude', DbType.real);
  }

  TreeField _latitude;
  TreeField get latitude {
    return _latitude = setField(_latitude, 'latitude', DbType.real);
  }

  TreeField _is_alive;
  TreeField get is_alive {
    return _is_alive = setField(_is_alive, 'is_alive', DbType.integer);
  }

  TreeField _is_seedling;
  TreeField get is_seedling {
    return _is_seedling = setField(_is_seedling, 'is_seedling', DbType.integer);
  }

  TreeField _diameter;
  TreeField get diameter {
    return _diameter = setField(_diameter, 'diameter', DbType.integer);
  }

  TreeField _multibarrel;
  TreeField get multibarrel {
    return _multibarrel = setField(_multibarrel, 'multibarrel', DbType.integer);
  }

  TreeField _id_state;
  TreeField get id_state {
    return _id_state = setField(_id_state, 'id_state', DbType.integer);
  }

  TreeField _firstthread;
  TreeField get firstthread {
    return _firstthread = setField(_firstthread, 'firstthread', DbType.integer);
  }

  TreeField _ids_condition;
  TreeField get ids_condition {
    return _ids_condition =
        setField(_ids_condition, 'ids_condition', DbType.text);
  }

  TreeField _custom_condition;
  TreeField get custom_condition {
    return _custom_condition =
        setField(_custom_condition, 'custom_condition', DbType.text);
  }

  TreeField _id_surroundings;
  TreeField get id_surroundings {
    return _id_surroundings =
        setField(_id_surroundings, 'id_surroundings', DbType.integer);
  }

  TreeField _ids_neighbours;
  TreeField get ids_neighbours {
    return _ids_neighbours =
        setField(_ids_neighbours, 'ids_neighbours', DbType.text);
  }

  TreeField _id_overall;
  TreeField get id_overall {
    return _id_overall = setField(_id_overall, 'id_overall', DbType.integer);
  }

  TreeField _images;
  TreeField get images {
    return _images = setField(_images, 'images', DbType.text);
  }

  TreeField _height;
  TreeField get height {
    return _height = setField(_height, 'height', DbType.real);
  }

  TreeField _isDeleted;
  TreeField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll(
                  '?',
                  param.value is String
                      ? '\'${param.value.toString()}\''
                      : param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Tree._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Tree> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Tree._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTree.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTree.delete(qparams);
    }
    return r;
  }

  /// Recover List<Tree> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Tree bulk invoked');
    return _obj._mnTree.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id_tree IN (SELECT id_tree from tree ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnTree.updateBatch(qparams, values);
  }

  /// This method always returns Tree Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tree>
  Future<Tree> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTree.toList(qparams);
    final data = await objFuture;
    Tree obj;
    if (data.isNotEmpty) {
      obj = Tree.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) treeCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final treesFuture = await _obj._mnTree.toList(qparams);
    final int count = treesFuture[0]['CNT'] as int;
    if (treeCount != null) {
      treeCount(count);
    }
    return count;
  }

  /// This method returns List<Tree>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Tree>
  Future<List<Tree>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Tree> treesData = await Tree.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return treesData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTree.toList(qparams);
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> id_treeData = <int>[];
    qparams.selectColumns = ['id_tree'];
    final id_treeFuture = await _obj._mnTree.toList(qparams);

    final int count = id_treeFuture.length;
    for (int i = 0; i < count; i++) {
      id_treeData.add(id_treeFuture[i]['id_tree'] as int);
    }
    return id_treeData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnTree.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Tree.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnTree.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TreeFilterBuilder

// region TreeFields
class TreeFields {
  static TableField _fId_tree;
  static TableField get id_tree {
    return _fId_tree =
        _fId_tree ?? SqlSyntax.setField(_fId_tree, 'id_tree', DbType.integer);
  }

  static TableField _fId_system;
  static TableField get id_system {
    return _fId_system = _fId_system ??
        SqlSyntax.setField(_fId_system, 'id_system', DbType.integer);
  }

  static TableField _fCreated;
  static TableField get created {
    return _fCreated =
        _fCreated ?? SqlSyntax.setField(_fCreated, 'created', DbType.integer);
  }

  static TableField _fUploaded;
  static TableField get uploaded {
    return _fUploaded = _fUploaded ??
        SqlSyntax.setField(_fUploaded, 'uploaded', DbType.integer);
  }

  static TableField _fIs_deleted;
  static TableField get is_deleted {
    return _fIs_deleted = _fIs_deleted ??
        SqlSyntax.setField(_fIs_deleted, 'is_deleted', DbType.integer);
  }

  static TableField _fId_user;
  static TableField get id_user {
    return _fId_user =
        _fId_user ?? SqlSyntax.setField(_fId_user, 'id_user', DbType.integer);
  }

  static TableField _fId_treetype;
  static TableField get id_treetype {
    return _fId_treetype = _fId_treetype ??
        SqlSyntax.setField(_fId_treetype, 'id_treetype', DbType.integer);
  }

  static TableField _fCustom_treetype;
  static TableField get custom_treetype {
    return _fCustom_treetype = _fCustom_treetype ??
        SqlSyntax.setField(_fCustom_treetype, 'custom_treetype', DbType.text);
  }

  static TableField _fLongitude;
  static TableField get longitude {
    return _fLongitude = _fLongitude ??
        SqlSyntax.setField(_fLongitude, 'longitude', DbType.real);
  }

  static TableField _fLatitude;
  static TableField get latitude {
    return _fLatitude =
        _fLatitude ?? SqlSyntax.setField(_fLatitude, 'latitude', DbType.real);
  }

  static TableField _fIs_alive;
  static TableField get is_alive {
    return _fIs_alive = _fIs_alive ??
        SqlSyntax.setField(_fIs_alive, 'is_alive', DbType.integer);
  }

  static TableField _fIs_seedling;
  static TableField get is_seedling {
    return _fIs_seedling = _fIs_seedling ??
        SqlSyntax.setField(_fIs_seedling, 'is_seedling', DbType.integer);
  }

  static TableField _fDiameter;
  static TableField get diameter {
    return _fDiameter = _fDiameter ??
        SqlSyntax.setField(_fDiameter, 'diameter', DbType.integer);
  }

  static TableField _fMultibarrel;
  static TableField get multibarrel {
    return _fMultibarrel = _fMultibarrel ??
        SqlSyntax.setField(_fMultibarrel, 'multibarrel', DbType.integer);
  }

  static TableField _fId_state;
  static TableField get id_state {
    return _fId_state = _fId_state ??
        SqlSyntax.setField(_fId_state, 'id_state', DbType.integer);
  }

  static TableField _fFirstthread;
  static TableField get firstthread {
    return _fFirstthread = _fFirstthread ??
        SqlSyntax.setField(_fFirstthread, 'firstthread', DbType.integer);
  }

  static TableField _fIds_condition;
  static TableField get ids_condition {
    return _fIds_condition = _fIds_condition ??
        SqlSyntax.setField(_fIds_condition, 'ids_condition', DbType.text);
  }

  static TableField _fCustom_condition;
  static TableField get custom_condition {
    return _fCustom_condition = _fCustom_condition ??
        SqlSyntax.setField(_fCustom_condition, 'custom_condition', DbType.text);
  }

  static TableField _fId_surroundings;
  static TableField get id_surroundings {
    return _fId_surroundings = _fId_surroundings ??
        SqlSyntax.setField(
            _fId_surroundings, 'id_surroundings', DbType.integer);
  }

  static TableField _fIds_neighbours;
  static TableField get ids_neighbours {
    return _fIds_neighbours = _fIds_neighbours ??
        SqlSyntax.setField(_fIds_neighbours, 'ids_neighbours', DbType.text);
  }

  static TableField _fId_overall;
  static TableField get id_overall {
    return _fId_overall = _fId_overall ??
        SqlSyntax.setField(_fId_overall, 'id_overall', DbType.integer);
  }

  static TableField _fImages;
  static TableField get images {
    return _fImages =
        _fImages ?? SqlSyntax.setField(_fImages, 'images', DbType.text);
  }

  static TableField _fHeight;
  static TableField get height {
    return _fHeight =
        _fHeight ?? SqlSyntax.setField(_fHeight, 'height', DbType.real);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TreeFields

//region TreeManager
class TreeManager extends SqfEntityProvider {
  TreeManager()
      : super(CountreeStoreDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'tree';
  static final List<String> _primaryKeyList = ['id_tree'];
  static final String _whereStr = 'id_tree=?';
}

//endregion TreeManager
class CountreeStoreDbModelSequenceManager extends SqfEntityProvider {
  CountreeStoreDbModelSequenceManager() : super(CountreeStoreDbModel());
}
// END OF ENTITIES
